from data_class import Data
from os import system

if __name__ == "__main__":
    system("cls")

    # CSV files generated by Picoscope. 32 waveforms saved.
    csv_file_prefix = "20230504-0001\\20230504-0001_" # exlude the waveform number and the file format
    file_number_range = range(1,33) # last one not included

    fft_time_window_us = [71,75.5] # the time interval for the fft 

    data = Data(csv_file_prefix, file_number_range, fft_time_window_us)

    data.plot_signal((data.full_time_us, data.full_averaged_voltage_V), "Full Averaged Signal", ("Time, us", "Voltage, V"), save=True)
    data.plot_signal((data.averaged_time_us, data.averaged_voltage_V), "Averaged Signal", ("Time, us", "Voltage, V"), save=True)

    data.apply_fft_on_interval()

    data.limit_fft_result(limits=[1e6, 3e6])
    data.smoothen_fft_result()

    data.calculate_bandwidths()
    print(f"\n-3dB Bandwidth = {data.BW_3dB_percentage:.2f}%")
    print(f"-6dB Bandwidth = {data.BW_6dB_percentage:.2f}%\n")
    

    data.plot_signal((data.frequency, data.fft_amp), "FFT Result", ("Frequency, Hz", "Amplitude, V"), save=True)
    data.plot_signal((data.smooth_frequency, data.smooth_fft_amp), "Smooth FFT Result", ("Frequency, Hz", "Amplitude, dB"), save=True)
    
    import matplotlib.pyplot as plt
    
    fig1, ax1 = plt.subplots()
    
    ax1.set_title("FFT results w/ BW")
    ax1.set_xlabel("Frequency, Hz")
    ax1.set_ylabel("Amplitude, dB")
    ax1.plot(data.smooth_frequency, data.smooth_fft_amp, lw=1)
    ax1.scatter(data.smooth_frequency[data.indexes3dB], data.smooth_fft_amp[data.indexes3dB], 100, color="red")
    ax1.scatter(data.smooth_frequency[data.indexes6dB], data.smooth_fft_amp[data.indexes6dB], 100, color="black")
    fig1.savefig(f"{data.export_folder}\\FFT with BW.png",bbox_inches='tight',dpi=300)
    plt.show()